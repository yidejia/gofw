// Package {{CustomPackageName}} {{ModuleComment}}模块包
package {{CustomPackageName}}

import (
	"github.com/yidejia/gofw/pkg/db"
	gfErrors "github.com/yidejia/gofw/pkg/errors"
	"github.com/yidejia/gofw/pkg/paginator"
	"{{AppName}}/app/models/{{CustomPackageName}}"
	repos "{{AppName}}/app/repositories"
)

// {{StructName}}Repository {{Comment}}仓库
// @author {{Author}} {{AuthorEmail}}
// @created {{CreatedDataTime}}
// @copyright © {{CopyrightFromYear}}-{{CopyrightToYear}} {{AuthorCompany}}
type {{StructName}}Repository struct {
	repos.Repository
}

// New{{StructName}}Repository 生成{{Comment}}仓库实例
func New{{StructName}}Repository() *{{StructName}}Repository {
	return &{{StructName}}Repository{}
}

// Create 创建{{Comment}}
func (repo *{{StructName}}Repository) Create({{VariableName}} *{{CustomPackageName}}.{{StructName}}) (err gfErrors.ResponsiveError) {
    if _err := db.DB({{VariableName}}).Create({{VariableName}}).Error; _err != nil {
		err = repo.NewErrorInternal(_err, "创建{{Comment}}失败", "{{ModuleComment}}模块", "Create 创建{{Comment}}")
	}
	return
}

// Paginate {{Comment}}列表
func (repo *{{StructName}}Repository) Paginate(page, perPage int, fields ...string) ({{VariableNamePlural}} []{{CustomPackageName}}.{{StructName}}, paging paginator.Paging, err gfErrors.ResponsiveError) {

	var _err error

	if len(fields) > 0 {
		paging, _err = paginator.Paginate(db.Model(&{{CustomPackageName}}.{{StructName}}{}).Select(fields), &{{VariableNamePlural}}, page, perPage)
	} else {
		paging, _err = paginator.Paginate(db.Model(&{{CustomPackageName}}.{{StructName}}{}), &{{VariableNamePlural}}, page, perPage)
	}

	if err != nil {
		err = repo.NewErrorInternal(_err, "获取{{Comment}}列表失败", "{{ModuleComment}}模块", "Paginate {{Comment}}列表")
	}

	return
}

// All 获取所有{{Comment}}
func (repo *{{StructName}}Repository) All(fields ...string) ({{VariableNamePlural}} []{{CustomPackageName}}.{{StructName}}, err gfErrors.ResponsiveError) {

	var _err error

	if len(fields) > 0 {
		_err = db.DB(&{{CustomPackageName}}.{{StructName}}{}).Select(fields).Find(&{{VariableNamePlural}}).Error
	} else {
		_err = db.DB(&{{CustomPackageName}}.{{StructName}}{}).Find(&{{VariableNamePlural}}).Error
	}

	if _err != nil {
		err = repo.NewError(_err, &{{CustomPackageName}}.{{StructName}}{}, "{{ModuleComment}}模块", "All 获取所有{{Comment}}")
	}

	return
}

// Get 通过 ID 获取{{Comment}}
func (repo *{{StructName}}Repository) Get(id uint64, fields ...string) ({{VariableName}} {{CustomPackageName}}.{{StructName}}, err gfErrors.ResponsiveError) {

	var _err error

	if len(fields) > 0 {
		_err = db.DB(&{{VariableName}}).Where("id", id).Select(fields).First(&{{VariableName}}).Error
	} else {
		_err = db.DB(&{{VariableName}}).Where("id", id).First(&{{VariableName}}).Error
	}

	if _err != nil {
		err = repo.NewError(_err, &{{VariableName}}, "{{ModuleComment}}模块", "Get 通过 ID 获取{{Comment}}")
	}

	return
}

// GetBy 通过指定字段获取{{Comment}}
func (repo *{{StructName}}Repository) GetBy(field, value string, fields ...string) ({{VariableName}} {{CustomPackageName}}.{{StructName}}, err gfErrors.ResponsiveError) {

	var _err error

	if len(fields) > 0 {
		_err = db.DB(&{{VariableName}}).Where(field, value).Select(fields).First(&{{VariableName}}).Error
	} else {
		_err = db.DB(&{{VariableName}}).Where(field, value).First(&{{VariableName}}).Error
	}

	if _err != nil {
		err = repo.NewError(_err, &{{VariableName}}, "员工模块", "GetBy 通过指定字段获取{{Comment}}")
	}

	return
}

// Save 保存{{Comment}}
func (repo *{{StructName}}Repository) Save({{VariableName}} *{{CustomPackageName}}.{{StructName}}) (rowsAffected int64, err gfErrors.ResponsiveError) {
    result := db.DB({{VariableName}}).Save({{VariableName}})
	rowsAffected = result.RowsAffected
	if _err := result.Error; _err != nil {
		err = repo.NewErrorInternal(_err, "保存{{Comment}}失败", "{{ModuleComment}}模块", "Save 保存{{Comment}}")
	}
    return
}

// Delete 删除{{Comment}}
func (repo *{{StructName}}Repository) Delete({{VariableName}} *{{CustomPackageName}}.{{StructName}}) (rowsAffected int64, err gfErrors.ResponsiveError) {
    result := db.DB({{VariableName}}).Delete({{VariableName}})
	rowsAffected = result.RowsAffected
	if _err := result.Error; _err != nil {
		err = repo.NewErrorInternal(_err, "删除{{Comment}}失败", "{{ModuleComment}}模块", "Delete 删除{{Comment}}")
	}
    return
}

// Exists 根据字段判断{{Comment}}是否存在
func (repo *{{StructName}}Repository) Exists(field, value string) (bool, gfErrors.ResponsiveError) {
    var count int64
    if _err := db.Model(&{{CustomPackageName}}.{{StructName}}{}).Where(field, value).Count(&count).Error; _err != nil {
		return false, repo.NewErrorInternal(_err, "根据字段判断{{Comment}}是否存在失败", "{{ModuleComment}}模块", "IsExist 根据字段判断{{Comment}}是否存在")
	}
    return count > 0, nil
}
